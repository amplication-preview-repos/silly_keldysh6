/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Accommodation as PrismaAccommodation,
  Itinerary as PrismaItinerary,
} from "@prisma/client";

export class AccommodationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccommodationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accommodation.count(args);
  }

  async accommodations(
    args: Prisma.AccommodationFindManyArgs
  ): Promise<PrismaAccommodation[]> {
    return this.prisma.accommodation.findMany(args);
  }
  async accommodation(
    args: Prisma.AccommodationFindUniqueArgs
  ): Promise<PrismaAccommodation | null> {
    return this.prisma.accommodation.findUnique(args);
  }
  async createAccommodation(
    args: Prisma.AccommodationCreateArgs
  ): Promise<PrismaAccommodation> {
    return this.prisma.accommodation.create(args);
  }
  async updateAccommodation(
    args: Prisma.AccommodationUpdateArgs
  ): Promise<PrismaAccommodation> {
    return this.prisma.accommodation.update(args);
  }
  async deleteAccommodation(
    args: Prisma.AccommodationDeleteArgs
  ): Promise<PrismaAccommodation> {
    return this.prisma.accommodation.delete(args);
  }

  async findItineraries(
    parentId: string,
    args: Prisma.ItineraryFindManyArgs
  ): Promise<PrismaItinerary[]> {
    return this.prisma.accommodation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .itineraries(args);
  }
}
