/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccommodationService } from "../accommodation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccommodationCreateInput } from "./AccommodationCreateInput";
import { Accommodation } from "./Accommodation";
import { AccommodationFindManyArgs } from "./AccommodationFindManyArgs";
import { AccommodationWhereUniqueInput } from "./AccommodationWhereUniqueInput";
import { AccommodationUpdateInput } from "./AccommodationUpdateInput";
import { ItineraryFindManyArgs } from "../../itinerary/base/ItineraryFindManyArgs";
import { Itinerary } from "../../itinerary/base/Itinerary";
import { ItineraryWhereUniqueInput } from "../../itinerary/base/ItineraryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccommodationControllerBase {
  constructor(
    protected readonly service: AccommodationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accommodation })
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccommodation(
    @common.Body() data: AccommodationCreateInput
  ): Promise<Accommodation> {
    return await this.service.createAccommodation({
      data: data,
      select: {
        costPerNight: true,
        createdAt: true,
        id: true,
        name: true,
        noiseLevels: true,
        powerOutlets: true,
        typeField: true,
        updatedAt: true,
        wifiAvailability: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Accommodation] })
  @ApiNestedQuery(AccommodationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accommodations(
    @common.Req() request: Request
  ): Promise<Accommodation[]> {
    const args = plainToClass(AccommodationFindManyArgs, request.query);
    return this.service.accommodations({
      ...args,
      select: {
        costPerNight: true,
        createdAt: true,
        id: true,
        name: true,
        noiseLevels: true,
        powerOutlets: true,
        typeField: true,
        updatedAt: true,
        wifiAvailability: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accommodation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accommodation(
    @common.Param() params: AccommodationWhereUniqueInput
  ): Promise<Accommodation | null> {
    const result = await this.service.accommodation({
      where: params,
      select: {
        costPerNight: true,
        createdAt: true,
        id: true,
        name: true,
        noiseLevels: true,
        powerOutlets: true,
        typeField: true,
        updatedAt: true,
        wifiAvailability: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accommodation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccommodation(
    @common.Param() params: AccommodationWhereUniqueInput,
    @common.Body() data: AccommodationUpdateInput
  ): Promise<Accommodation | null> {
    try {
      return await this.service.updateAccommodation({
        where: params,
        data: data,
        select: {
          costPerNight: true,
          createdAt: true,
          id: true,
          name: true,
          noiseLevels: true,
          powerOutlets: true,
          typeField: true,
          updatedAt: true,
          wifiAvailability: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accommodation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccommodation(
    @common.Param() params: AccommodationWhereUniqueInput
  ): Promise<Accommodation | null> {
    try {
      return await this.service.deleteAccommodation({
        where: params,
        select: {
          costPerNight: true,
          createdAt: true,
          id: true,
          name: true,
          noiseLevels: true,
          powerOutlets: true,
          typeField: true,
          updatedAt: true,
          wifiAvailability: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/itineraries")
  @ApiNestedQuery(ItineraryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "read",
    possession: "any",
  })
  async findItineraries(
    @common.Req() request: Request,
    @common.Param() params: AccommodationWhereUniqueInput
  ): Promise<Itinerary[]> {
    const query = plainToClass(ItineraryFindManyArgs, request.query);
    const results = await this.service.findItineraries(params.id, {
      ...query,
      select: {
        accommodation: {
          select: {
            id: true,
          },
        },

        activities: true,
        createdAt: true,

        destination: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/itineraries")
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "update",
    possession: "any",
  })
  async connectItineraries(
    @common.Param() params: AccommodationWhereUniqueInput,
    @common.Body() body: ItineraryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itineraries: {
        connect: body,
      },
    };
    await this.service.updateAccommodation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/itineraries")
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "update",
    possession: "any",
  })
  async updateItineraries(
    @common.Param() params: AccommodationWhereUniqueInput,
    @common.Body() body: ItineraryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itineraries: {
        set: body,
      },
    };
    await this.service.updateAccommodation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/itineraries")
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "update",
    possession: "any",
  })
  async disconnectItineraries(
    @common.Param() params: AccommodationWhereUniqueInput,
    @common.Body() body: ItineraryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itineraries: {
        disconnect: body,
      },
    };
    await this.service.updateAccommodation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
