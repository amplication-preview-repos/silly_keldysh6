/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Itinerary } from "./Itinerary";
import { ItineraryCountArgs } from "./ItineraryCountArgs";
import { ItineraryFindManyArgs } from "./ItineraryFindManyArgs";
import { ItineraryFindUniqueArgs } from "./ItineraryFindUniqueArgs";
import { CreateItineraryArgs } from "./CreateItineraryArgs";
import { UpdateItineraryArgs } from "./UpdateItineraryArgs";
import { DeleteItineraryArgs } from "./DeleteItineraryArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { Accommodation } from "../../accommodation/base/Accommodation";
import { Destination } from "../../destination/base/Destination";
import { User } from "../../user/base/User";
import { ItineraryService } from "../itinerary.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Itinerary)
export class ItineraryResolverBase {
  constructor(
    protected readonly service: ItineraryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "read",
    possession: "any",
  })
  async _itinerariesMeta(
    @graphql.Args() args: ItineraryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Itinerary])
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "read",
    possession: "any",
  })
  async itineraries(
    @graphql.Args() args: ItineraryFindManyArgs
  ): Promise<Itinerary[]> {
    return this.service.itineraries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Itinerary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "read",
    possession: "own",
  })
  async itinerary(
    @graphql.Args() args: ItineraryFindUniqueArgs
  ): Promise<Itinerary | null> {
    const result = await this.service.itinerary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Itinerary)
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "create",
    possession: "any",
  })
  async createItinerary(
    @graphql.Args() args: CreateItineraryArgs
  ): Promise<Itinerary> {
    return await this.service.createItinerary({
      ...args,
      data: {
        ...args.data,

        accommodation: args.data.accommodation
          ? {
              connect: args.data.accommodation,
            }
          : undefined,

        destination: args.data.destination
          ? {
              connect: args.data.destination,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Itinerary)
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "update",
    possession: "any",
  })
  async updateItinerary(
    @graphql.Args() args: UpdateItineraryArgs
  ): Promise<Itinerary | null> {
    try {
      return await this.service.updateItinerary({
        ...args,
        data: {
          ...args.data,

          accommodation: args.data.accommodation
            ? {
                connect: args.data.accommodation,
              }
            : undefined,

          destination: args.data.destination
            ? {
                connect: args.data.destination,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Itinerary)
  @nestAccessControl.UseRoles({
    resource: "Itinerary",
    action: "delete",
    possession: "any",
  })
  async deleteItinerary(
    @graphql.Args() args: DeleteItineraryArgs
  ): Promise<Itinerary | null> {
    try {
      return await this.service.deleteItinerary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async findBookings(
    @graphql.Parent() parent: Itinerary,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Accommodation, {
    nullable: true,
    name: "accommodation",
  })
  @nestAccessControl.UseRoles({
    resource: "Accommodation",
    action: "read",
    possession: "any",
  })
  async getAccommodation(
    @graphql.Parent() parent: Itinerary
  ): Promise<Accommodation | null> {
    const result = await this.service.getAccommodation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Destination, {
    nullable: true,
    name: "destination",
  })
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "read",
    possession: "any",
  })
  async getDestination(
    @graphql.Parent() parent: Itinerary
  ): Promise<Destination | null> {
    const result = await this.service.getDestination(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Itinerary): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
