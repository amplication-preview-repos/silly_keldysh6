/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Itinerary as PrismaItinerary,
  Booking as PrismaBooking,
  Accommodation as PrismaAccommodation,
  Destination as PrismaDestination,
  User as PrismaUser,
} from "@prisma/client";

export class ItineraryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItineraryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itinerary.count(args);
  }

  async itineraries(
    args: Prisma.ItineraryFindManyArgs
  ): Promise<PrismaItinerary[]> {
    return this.prisma.itinerary.findMany(args);
  }
  async itinerary(
    args: Prisma.ItineraryFindUniqueArgs
  ): Promise<PrismaItinerary | null> {
    return this.prisma.itinerary.findUnique(args);
  }
  async createItinerary(
    args: Prisma.ItineraryCreateArgs
  ): Promise<PrismaItinerary> {
    return this.prisma.itinerary.create(args);
  }
  async updateItinerary(
    args: Prisma.ItineraryUpdateArgs
  ): Promise<PrismaItinerary> {
    return this.prisma.itinerary.update(args);
  }
  async deleteItinerary(
    args: Prisma.ItineraryDeleteArgs
  ): Promise<PrismaItinerary> {
    return this.prisma.itinerary.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.itinerary
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async getAccommodation(
    parentId: string
  ): Promise<PrismaAccommodation | null> {
    return this.prisma.itinerary
      .findUnique({
        where: { id: parentId },
      })
      .accommodation();
  }

  async getDestination(parentId: string): Promise<PrismaDestination | null> {
    return this.prisma.itinerary
      .findUnique({
        where: { id: parentId },
      })
      .destination();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.itinerary
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
